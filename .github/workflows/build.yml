name: Build TCMT Windows Client

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

env:
  SOLUTION_FILE_PATH: Project1/Project1.sln
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: x64
  ERROR_KEYWORDS: "error|warning|fatal|undefined"
  LOG_SUMMARY_LINES: 50

jobs:
  cuda:
    runs-on: windows-2022
    outputs:
      cuda_ok: ${{ steps.check_cuda.outcome == 'success' }}
    steps:
    - name: Cache CUDA Toolkit
      uses: actions/cache@v4
      with:
        path: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA
        key: cuda-12.6.0
    - name: Setup CUDA 12.6
      id: cuda_install
      uses: Jimver/cuda-toolkit@v0.2.18
      with:
        cuda: '12.6.0'
        method: 'network'
    - name: Check CUDA directory
      id: check_cuda
      shell: pwsh
      run: |
        if (-not (Test-Path "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6")) {
          Write-Host "CUDA 12.6 安装失败！"
          exit 1
        } else {
          Write-Host "CUDA 12.6 安装成功。"
        }
    - name: 上传CUDA安装log
      if: failure()
      shell: pwsh
      run: |
        Set-Content -Path cuda_install_failed.txt -Value "CUDA 12.6 安装失败，main编译不会继续。"
    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cuda_install_failed.txt
        path: cuda_install_failed.txt

  build_lib:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Setup .NET Framework
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.x'
    - name: Restore NuGet packages
      run: nuget restore ${{ env.SOLUTION_FILE_PATH }}
    - name: Build LibreHardwareMonitorLib
      run: |
        cd src/third_party/LibreHardwareMonitor
        dotnet build LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj -c Release -f net472 2>&1 | Tee-Object -FilePath ..\..\..\build_lib.log
    - name: 提取警告和错误
      shell: pwsh
      run: |
        $log = Get-Content build_lib.log | Select-String -Pattern "${{ env.ERROR_KEYWORDS }}"
        $summary = if ($log) { $log | Out-String } else { "没有警告或错误。" }
        Set-Content build_lib.summary.txt $summary
        echo "$summary" >> $GITHUB_STEP_SUMMARY
    - name: 上传日志和总结
      uses: actions/upload-artifact@v4
      with:
        name: build_lib_logs
        path: |
          build_lib.log
          build_lib.summary.txt

  build_wpf:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Setup .NET Framework
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.x'
    - name: Build WPF-UI1
      run: |
        cd WPF-UI1
        dotnet build WPF-UI1.csproj -c Release 2>&1 | Tee-Object -FilePath ..\wpfui1_build.log
    - name: 提取警告和错误
      shell: pwsh
      run: |
        $log = Get-Content wpfui1_build.log | Select-String -Pattern "${{ env.ERROR_KEYWORDS }}"
        $summary = if ($log) { $log | Out-String } else { "没有警告或错误。" }
        Set-Content wpfui1_build.summary.txt $summary
        echo "$summary" >> $GITHUB_STEP_SUMMARY
    - name: 上传日志和总结
      uses: actions/upload-artifact@v4
      with:
        name: wpfui1_build_logs
        path: |
          wpfui1_build.log
          wpfui1_build.summary.txt

  build_cpp:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
    - name: Setup Visual Studio environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    - name: Build CPP-parsers
      run: |
        msbuild src/CPP-parsers/CPP-parsers/CPP-parsers.vcxproj /p:Configuration=Release /p:Platform=x64 /p:PlatformToolset=v143 /p:WindowsTargetPlatformVersion=10.0 /m 2>&1 | Tee-Object -FilePath cpp_parsers_build.log
    - name: 提取警告和错误
      shell: pwsh
      run: |
        $log = Get-Content cpp_parsers_build.log | Select-String -Pattern "${{ env.ERROR_KEYWORDS }}"
        $summary = if ($log) { $log | Out-String } else { "没有警告或错误。" }
        Set-Content cpp_parsers_build.summary.txt $summary
        echo "$summary" >> $GITHUB_STEP_SUMMARY
    - name: 上传日志和总结
      uses: actions/upload-artifact@v4
      with:
        name: cpp_parsers_build_logs
        path: |
          cpp_parsers_build.log
          cpp_parsers_build.summary.txt

  build_main:
    runs-on: windows-2022
    needs: [cuda, build_lib, build_wpf, build_cpp]
    if: needs.cuda.result == 'success'
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
    - name: Setup Visual Studio environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    - name: Build main project
      run: |
        msbuild ${{ env.SOLUTION_FILE_PATH }} /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=${{ env.BUILD_PLATFORM }} /p:PlatformToolset=v143 /p:WindowsTargetPlatformVersion=10.0 /m 2>&1 | Tee-Object -FilePath main_build.log
    - name: 提取警告和错误
      shell: pwsh
      run: |
        $log = Get-Content main_build.log | Select-String -Pattern "${{ env.ERROR_KEYWORDS }}"
        $summary = if ($log) { $log | Out-String } else { "没有警告或错误。" }
        Set-Content main_build.summary.txt $summary
        echo "$summary" >> $GITHUB_STEP_SUMMARY
    - name: 上传日志和总结
      uses: actions/upload-artifact@v4
      with:
        name: main_build_logs
        path: |
          main_build.log
          main_build.summary.txt
    - name: 上传主程序产物
      uses: actions/upload-artifact@v4
      with:
        name: TCMT-Windows-Client-${{ env.BUILD_PLATFORM }}-${{ env.BUILD_CONFIGURATION }}
        path: |
          Project1/x64/${{ env.BUILD_CONFIGURATION }}/*.exe
          Project1/x64/${{ env.BUILD_CONFIGURATION }}/*.dll
          Project1/x64/${{ env.BUILD_CONFIGURATION }}/*.pdb

  report_error:
    if: always() && github.event_name == 'pull_request'
    runs-on: windows-2022
    needs: [cuda, build_lib, build_wpf, build_cpp, build_main]
    steps:
    - name: Download logs
      uses: actions/download-artifact@v4
      with:
        path: logs
    - name: 汇总所有模块警告和错误
      shell: pwsh
      run: |
        $report = ""
        if (Test-Path "logs/cuda_install_failed.txt") {
          $report = Get-Content "logs/cuda_install_failed.txt" -Raw
        } else {
          $modules = @("build_lib", "wpfui1_build", "cpp_parsers_build", "main_build")
          foreach ($m in $modules) {
            $sfile = "logs/${m}.summary.txt"
            if (Test-Path $sfile) {
              $txt = Get-Content $sfile -Raw
              $report += "`n==== $m ====`n$txt"
            }
          }
          if ($report -eq "") { $report = "没有模块产生任何警告或错误。" }
        }
        Set-Content logs/ci_error_report.txt $report
        echo "$report" >> $GITHUB_STEP_SUMMARY
    - name: 上传error report
      uses: actions/upload-artifact@v4
      with:
        name: ci_error_report.txt
        path: logs/ci_error_report.txt

  comment-on-pr:
    if: failure() && github.event_name == 'pull_request'
    runs-on: windows-2022
    needs: [cuda, build_lib, build_wpf, build_cpp, build_main, report_error]
    steps:
    - name: Download logs
      uses: actions/download-artifact@v4
      with:
        path: logs
    - name: 评论到PR（仅Copilot Agent PR自动）
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_ACTOR: ${{ github.actor }}
      run: |
        # 只支持 Copilot Agent PR 自动反馈
        $pr_author = $env:GITHUB_ACTOR
        if ($pr_author -ne "github-copilot[bot]" -and $pr_author -ne "github-actions[bot]") {
          Write-Host "Not a Copilot agent PR, skipping comment."
          exit 0
        }

        $PR_NUMBER = $env:PR_NUMBER
        $actions_url = "https://github.com/$($env:GITHUB_REPOSITORY)/actions/runs/$($env:GITHUB_RUN_ID)"

        $errMsg = Get-Content logs/ci_error_report.txt -Raw

        $comment = "@copilot @$pr_author  `n`nPR编译失败了  `n`n关键警告和错误日志如下：  `n````  `n$errMsg`n````  `n如需完整日志请查Actions artifacts。  `n`n$actions_url"
        $headers = @{
          Authorization = "token $env:GITHUB_TOKEN"
          "User-Agent" = "github-actions-powershell"
          "Accept" = "application/vnd.github+json"
        }
        $body = @{ body = $comment } | ConvertTo-Json
        $repo = $env:GITHUB_REPOSITORY
        $url = "https://api.github.com/repos/$repo/issues/$PR_NUMBER/comments"
        Write-Host "Commenting on PR #$PR_NUMBER, url: $url"
        Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $bodyy
