#include "CpuInfo.h"#include "Logger.h"#include <intrin.h>#include <windows.h>#include <vector>CpuInfo::CpuInfo() {    try {        DetectCores();        cpuName = GetNameFromRegistry();        updateUsage();    } catch (const std::exception& e) {        Logger::Error("CPU信息初始化失败: " + std::string(e.what()));    }}void CpuInfo::DetectCores() {    SYSTEM_INFO sysInfo;    GetSystemInfo(&sysInfo);    totalCores = sysInfo.dwNumberOfProcessors;    DWORD bufferSize = 0;    GetLogicalProcessorInformation(nullptr, &bufferSize);    std::vector<SYSTEM_LOGICAL_PROCESSOR_INFORMATION> buffer(bufferSize / sizeof(SYSTEM_LOGICAL_PROCESSOR_INFORMATION));    if (GetLogicalProcessorInformation(buffer.data(), &bufferSize)) {        for (const auto& info : buffer) {            if (info.Relationship == RelationProcessorCore) {                (info.ProcessorCore.Flags == 1) ? largeCores++ : smallCores++;            }        }    }}double CpuInfo::updateUsage() {    FILETIME idleTime, kernelTime, userTime;    if (!GetSystemTimes(&idleTime, &kernelTime, &userTime)) {        throw std::runtime_error("无法获取系统时间");    }    ULARGE_INTEGER idle, kernel, user;    idle.LowPart = idleTime.dwLowDateTime;    idle.HighPart = idleTime.dwHighDateTime;    kernel.LowPart = kernelTime.dwLowDateTime;    kernel.HighPart = kernelTime.dwHighDateTime;    user.LowPart = userTime.dwLowDateTime;    user.HighPart = userTime.dwHighDateTime;    ULONGLONG currentTotalSysTime = kernel.QuadPart + user.QuadPart;    ULONGLONG currentTotalIdleTime = idle.QuadPart;    ULONGLONG sysDelta = currentTotalSysTime - lastTotalSysTime;    ULONGLONG idleDelta = currentTotalIdleTime - lastTotalIdleTime;    if (sysDelta > 0) {        cpuUsage = (sysDelta - idleDelta) * 100.0 / sysDelta;    } else {        cpuUsage = 0.0;    }    lastTotalSysTime = currentTotalSysTime;    lastTotalIdleTime = currentTotalIdleTime;    return cpuUsage;}std::string CpuInfo::GetNameFromRegistry() {    HKEY hKey;    char buffer[128];    DWORD size = sizeof(buffer);    if (RegOpenKeyExA(HKEY_LOCAL_MACHINE, "HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", 0, KEY_READ, &hKey) == ERROR_SUCCESS) {        if (RegQueryValueExA(hKey, "ProcessorNameString", nullptr, nullptr, (LPBYTE)buffer, &size) == ERROR_SUCCESS) {            RegCloseKey(hKey);            return std::string(buffer, size - 1);        }        RegCloseKey(hKey);    }    return "Unknown CPU";}double CpuInfo::GetUsage() {    return cpuUsage;}int CpuInfo::GetTotalCores() const {    return totalCores;}int CpuInfo::GetSmallCores() const {    return smallCores;}int CpuInfo::GetLargeCores() const {    return largeCores;}DWORD CpuInfo::GetCurrentSpeed() const {    HKEY hKey;    DWORD speed = 0;    DWORD size = sizeof(DWORD);    if (RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", 0, KEY_READ, &hKey) == ERROR_SUCCESS) {        RegQueryValueExW(hKey, L"~MHz", NULL, NULL, (LPBYTE)&speed, &size);        RegCloseKey(hKey);    }    return speed;}std::string CpuInfo::GetName() {    return cpuName;}bool CpuInfo::IsHyperThreadingEnabled() const {    return (totalCores > (largeCores + smallCores));}bool CpuInfo::IsVirtualizationEnabled() const {    int cpuInfo[4];    __cpuid(cpuInfo, 1);    bool hasVMX = (cpuInfo[2] & (1 << 5)) != 0;    if (!hasVMX) return false;    bool isVMXEnabled = false;    __try {        unsigned __int64 msrValue = __readmsr(0x3A);        isVMXEnabled = (msrValue & 0x5) != 0;    }    __except (EXCEPTION_EXECUTE_HANDLER) {        isVMXEnabled = false;    }    return isVMXEnabled;}